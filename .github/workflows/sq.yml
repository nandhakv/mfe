name: SonarQube Analysis

on:
  workflow_dispatch:
    inputs:
      files:
        description: "Comma-separated list of files to analyze (e.g., src/index.js, app.js)"
        required: true
      branch:
        description: "Branch to run the analysis on"
        required: true
        default: "master"
      github_token:
        description: "GitHub Token from triggering request"
        required: true
      app_id:
        description: "GitHub App ID"
        required: true

jobs:
  sonar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Configure Git
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"

      - name: Mask GitHub Token
        run: echo "::add-mask::${{ github.event.inputs.github_token }}"

      - name: Run SonarQube Analysis
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: "squ_3edfa90db17cdd003e434da9a4e28de549a83595"
          SONAR_HOST_URL: "http://sonarqube-alb-1277571580.us-east-1.elb.amazonaws.com"
        with:
          args: >
            -Dsonar.projectKey=nandhakv_mfe_f6846554-c846-4374-8d0c-f9459c1dc983
            -Dsonar.sources=src/
            -Dsonar.scm.provider=git

      - name: Get SonarQube Report & Issues
        run: |
          SONAR_PROJECT_KEY="nandhakv_mfe_f6846554-c846-4374-8d0c-f9459c1dc983"
          SONAR_TOKEN="squ_3edfa90db17cdd003e434da9a4e28de549a83595"
          SONAR_HOST="http://sonarqube-alb-1277571580.us-east-1.elb.amazonaws.com"

          echo "üîç Fetching analysis ID..."
          ANALYSIS_RESPONSE=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/ce/component?component=$SONAR_PROJECT_KEY")

          echo "üìÑ Analysis Response: $ANALYSIS_RESPONSE"
          ANALYSIS_ID=$(echo "$ANALYSIS_RESPONSE" | jq -r '.current.analysisId')

          if [[ -z "$ANALYSIS_ID" || "$ANALYSIS_ID" == "null" ]]; then
            echo "‚ùå ERROR: Failed to get analysis ID."
            exit 1
          fi

          echo "‚úÖ Found Analysis ID: $ANALYSIS_ID"

          echo "üîç Fetching quality gate status..."
          REPORT_RESPONSE=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/qualitygates/project_status?analysisId=$ANALYSIS_ID")
          echo "üìÑ Quality Gate Response: $REPORT_RESPONSE"

          STATUS=$(echo "$REPORT_RESPONSE" | jq -r '.projectStatus.status')

          if [[ -z "$STATUS" || "$STATUS" == "null" ]]; then
            echo "‚ùå ERROR: Failed to get quality gate status."
            exit 1
          fi

          echo "‚úÖ SonarQube Status: $STATUS"

          ERRORS=$(echo "$REPORT_RESPONSE" | jq -c '[.projectStatus.conditions[] | select(.status=="ERROR") | {metric: .metricKey, value: .actualValue, threshold: .errorThreshold}]')

          echo "üîç Fetching issues for Analysis ID: $ANALYSIS_ID..."
          ISSUES_RESPONSE=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/issues/search?analysisId=$ANALYSIS_ID")

          echo "üìÑ Issues Response: $ISSUES_RESPONSE"

          jq -n --arg status "$STATUS" --argjson errors "$ERRORS" --argjson issues "$ISSUES_RESPONSE" \
            '{status: $status, errors: $errors, issues: $issues}' > sonar_report.json

      - name: Post SonarQube Report as GitHub Issue
        run: |
          REPO=${{ github.repository }}
          TITLE="SonarQube Report for ${{ github.event.inputs.branch }}"
          BODY=$(jq -r '. | tojson' sonar_report.json)

          echo "Creating GitHub issue with SonarQube report..."
          RESPONSE=$(curl -s -X POST "https://api.github.com/repos/$REPO/issues" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.event.inputs.github_token }}" \
            -d "{\"title\": \"$TITLE\", \"body\": \"\`\`\`json\n$BODY\n\`\`\`\"}")

          ISSUE_URL=$(echo "$RESPONSE" | jq -r '.html_url')

          if [[ -z "$ISSUE_URL" || "$ISSUE_URL" == "null" ]]; then
            echo "‚ùå ERROR: Failed to create issue."
            exit 1
          fi

          echo "‚úÖ SonarQube Report posted: $ISSUE_URL"
