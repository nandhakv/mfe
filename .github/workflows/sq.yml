name: SonarQube Analysis

on:
  workflow_dispatch:
    inputs:
      files:
        description: "Comma-separated list of files to analyze (e.g., src/index.js, app.js)"
        required: true
      branch:
        description: "Branch to run the analysis on"
        required: true
        default: "master"
      github_token:
        description: "GitHub Token from trigger request"
        required: true

jobs:
  sonar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Configure Git (Fix Missing Blame Info)
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"

      - name: Set Unique Project Key
        run: |
          TIMESTAMP=$(date +%s)
          UNIQUE_PROJECT_KEY="nandhakv_mfe_${TIMESTAMP}"
          echo "SONAR_PROJECT_KEY=$UNIQUE_PROJECT_KEY" >> $GITHUB_ENV
          echo "Using SonarQube Project Key: $UNIQUE_PROJECT_KEY"

      - name: Create SonarQube Project
        run: |
          echo "🚀 Creating new SonarQube project: $SONAR_PROJECT_KEY..."
          curl -s -X POST -u "squ_6727287fb92d5482177acbc7f816ef5bffddbd08:" \
            "http://sonarqube-alb-1277571580.us-east-1.elb.amazonaws.com/api/projects/create" \
            -d "name=$SONAR_PROJECT_KEY&project=$SONAR_PROJECT_KEY"
          echo "✅ SonarQube project created."

      - name: Run SonarQube Analysis
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: "squ_3edfa90db17cdd003e434da9a4e28de549a83595"
          SONAR_HOST_URL: "http://sonarqube-alb-1277571580.us-east-1.elb.amazonaws.com"
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.sources=${{ github.event.inputs.files }}
            -Dsonar.scm.provider=git

      - name: Get SonarQube Report & Issues
        run: |
          SONAR_PROJECT_KEY="${{ env.SONAR_PROJECT_KEY }}"
          SONAR_TOKEN="squ_3edfa90db17cdd003e434da9a4e28de549a83595"
          SONAR_HOST="http://sonarqube-alb-1277571580.us-east-1.elb.amazonaws.com"

          echo "🔍 Verifying SonarQube authentication..."
          AUTH_RESPONSE=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/authentication/validate")
          AUTH_STATUS=$(echo "$AUTH_RESPONSE" | jq -r '.valid')

          if [[ "$AUTH_STATUS" != "true" ]]; then
            echo "❌ ERROR: Invalid SonarQube token or authentication failed."
            exit 1
          fi
          echo "✅ Authentication successful."

          echo "🔍 Fetching analysis ID for project: $SONAR_PROJECT_KEY..."

          for i in {1..10}; do
            ANALYSIS_RESPONSE=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/ce/component?component=$SONAR_PROJECT_KEY")
            ANALYSIS_ID=$(echo "$ANALYSIS_RESPONSE" | jq -r '.current.analysisId')

            if [[ -n "$ANALYSIS_ID" && "$ANALYSIS_ID" != "null" ]]; then
              echo "✅ Found Analysis ID: $ANALYSIS_ID"
              break
            fi

            echo "⏳ Analysis not ready yet. Retrying in 10 seconds..."
            sleep 10
          done

          if [[ -z "$ANALYSIS_ID" || "$ANALYSIS_ID" == "null" ]]; then
            echo "❌ ERROR: Failed to get analysis ID after multiple attempts."
            exit 1
          fi

          echo "🔍 Fetching quality gate status..."
          REPORT_RESPONSE=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/qualitygates/project_status?analysisId=$ANALYSIS_ID")
          STATUS=$(echo "$REPORT_RESPONSE" | jq -r '.projectStatus.status')

          if [[ -z "$STATUS" || "$STATUS" == "null" ]]; then
            echo "❌ ERROR: Failed to get quality gate status."
            exit 1
          fi

          echo "✅ SonarQube Status: $STATUS"

          ERRORS=$(echo "$REPORT_RESPONSE" | jq -c '[.projectStatus.conditions[] | select(.status=="ERROR") | {metric: .metricKey, value: .actualValue, threshold: .errorThreshold}]')

          echo "🔍 Fetching issues for Analysis ID: $ANALYSIS_ID..."
          ISSUES_RESPONSE=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/issues/search?analysisId=$ANALYSIS_ID")

          # Ensure valid JSON format in sonar_report.json
          jq -n --arg status "$STATUS" --argjson errors "$ERRORS" --argjson issues "$ISSUES_RESPONSE" \
            '{status: $status, errors: $errors, issues: $issues}' > sonar_report.json

          echo "✅ SonarQube report generated successfully."

      - name: Create GitHub Check Run
        run: |
          GITHUB_REPO="${{ github.repository }}"
          GITHUB_SHA="${{ github.sha }}"
          GITHUB_TOKEN="${{ github.event.inputs.github_token }}"

          echo "Creating a GitHub Check Run to notify the GitHub App..."

          SONAR_REPORT=$(jq -c . sonar_report.json | jq -Rs .)

          RESPONSE=$(curl -s -X POST "https://api.github.com/repos/$GITHUB_REPO/check-runs" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -d @- <<EOF
          {
            "name": "SonarQube Analysis",
            "head_sha": "$GITHUB_SHA",
            "status": "completed",
            "conclusion": "success",
            "output": {
              "title": "SonarQube Analysis Report",
              "summary": "The SonarQube analysis has completed. Click below to view details.",
              "text": $SONAR_REPORT
            }
          }
          EOF
          )

          echo "GitHub Check Run Response: $RESPONSE"

      - name: Clean up workspace
        run: |
          echo "🗑️ Cleaning up workspace..."
          sudo rm -rf $GITHUB_WORKSPACE
          echo "✅ Workspace cleaned!"
