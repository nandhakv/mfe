name: SonarQube Analysis

on:
  workflow_dispatch:
    inputs:
      files:
        description: "Comma-separated list of files to analyze (e.g., src/index.js, app.js)"
        required: true
      branch:
        description: "Branch to run the analysis on"
        required: true
        default: "master"

jobs:
  sonar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up JDK 17 # SonarQube requires Java
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Set FILES variable
        run: |
          if [ -z "${{ github.event.inputs.files }}" ]; then
            echo "FILES=src/index.js" >> $GITHUB_ENV
          else
            echo "FILES=${{ github.event.inputs.files }}" >> $GITHUB_ENV
          fi

      - name: Run SonarQube Analysis
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: "squ_3edfa90db17cdd003e434da9a4e28de549a83595"
          SONAR_HOST_URL: "http://sonarqube-alb-1277571580.us-east-1.elb.amazonaws.com"
        with:
          args: "-Dsonar.projectKey=nandhakv_mfe_ae2fcefe-522f-479b-9d82-b2975807aaec -Dsonar.sources=${{ env.FILES }}"

      - name: Get SonarQube Analysis ID
        run: |
          SONAR_PROJECT_KEY="nandhakv_mfe_ae2fcefe-522f-479b-9d82-b2975807aaec"
          SONAR_HOST="http://sonarqube-alb-1277571580.us-east-1.elb.amazonaws.com"

          # Fetch the latest analysis task
          TASK_ID=$(curl -s -u $SONAR_TOKEN: \
            "$SONAR_HOST/api/ce/component?component=$SONAR_PROJECT_KEY" | jq -r '.current.id')

          echo "TASK_ID=$TASK_ID" >> $GITHUB_ENV

      - name: Fetch SonarQube Report
        run: |
          SONAR_HOST="http://sonarqube-alb-1277571580.us-east-1.elb.amazonaws.com"
          REPORT_URL="$SONAR_HOST/api/qualitygates/project_status?analysisId=${{ env.TASK_ID }}"

          # Get the report
          REPORT=$(curl -s -u $SONAR_TOKEN: "$REPORT_URL")

          # Extract key information (status, errors, warnings)
          STATUS=$(echo "$REPORT" | jq -r '.projectStatus.status')
          ERRORS=$(echo "$REPORT" | jq -r '.projectStatus.conditions[] | select(.status=="ERROR") | .metricKey')

          echo "SonarQube Analysis Status: $STATUS"
          echo "Errors: $ERRORS"

          # Save report to a file
          echo "{ \"status\": \"$STATUS\", \"errors\": \"$ERRORS\" }" > sonar_report.json

      - name: Send Report to Node.js Webhook
        run: |
          WEBHOOK_URL="https://hkdk.events/l6nci7bf5quk8c"

          curl -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               -d @sonar_report.json
