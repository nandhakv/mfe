name: SonarQube Analysis

on:
  workflow_dispatch:
    inputs:
      files:
        description: "Comma-separated list of files to analyze (e.g., src/index.js, app.js)"
        required: true
      branch:
        description: "Branch to run the analysis on"
        required: true
        default: "master"
      github_token:
        description: "GitHub Token from trigger request"
        required: true

jobs:
  sonar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Configure Git (Fix Missing Blame Info)
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"

      - name: Set Unique Project Key
        run: |
          TIMESTAMP=$(date +%s)
          UNIQUE_PROJECT_KEY="nandhakv_mfe_${TIMESTAMP}"
          echo "SONAR_PROJECT_KEY=$UNIQUE_PROJECT_KEY" >> $GITHUB_ENV
          echo "Using SonarQube Project Key: $UNIQUE_PROJECT_KEY"

      - name: Create SonarQube Project
        run: |
          echo "üöÄ Creating new SonarQube project: $SONAR_PROJECT_KEY..."
          curl -s -X POST -u "squ_6727287fb92d5482177acbc7f816ef5bffddbd08:" \
            "http://sonarqube-alb-1277571580.us-east-1.elb.amazonaws.com/api/projects/create" \
            -d "name=$SONAR_PROJECT_KEY&project=$SONAR_PROJECT_KEY"
          echo "‚úÖ SonarQube project created."

      - name: Run SonarQube Analysis
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: "squ_3edfa90db17cdd003e434da9a4e28de549a83595"
          SONAR_HOST_URL: "http://sonarqube-alb-1277571580.us-east-1.elb.amazonaws.com"
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.sources=.
            -Dsonar.inclusions=${{ github.event.inputs.files }}
            -Dsonar.scm.provider=git

      - name: Get SonarQube Report for Specific File
        run: |
          SONAR_PROJECT_KEY="${{ env.SONAR_PROJECT_KEY }}"
          SONAR_TOKEN="squ_3edfa90db17cdd003e434da9a4e28de549a83595"
          SONAR_HOST="http://sonarqube-alb-1277571580.us-east-1.elb.amazonaws.com"
          TARGET_FILE="${{ github.event.inputs.files }}"  # File passed in the workflow

          echo ":mag: Verifying SonarQube authentication..."
          AUTH_RESPONSE=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/authentication/validate")
          AUTH_STATUS=$(echo "$AUTH_RESPONSE" | jq -r '.valid')

          if [[ "$AUTH_STATUS" != "true" ]]; then
            echo ":x: ERROR: Invalid SonarQube token or authentication failed."
            exit 1
          fi
          echo ":white_check_mark: Authentication successful."

          echo ":mag: Fetching analysis ID for project: $SONAR_PROJECT_KEY..."

          for i in {1..10}; do
            ANALYSIS_RESPONSE=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/ce/component?component=$SONAR_PROJECT_KEY")
            ANALYSIS_ID=$(echo "$ANALYSIS_RESPONSE" | jq -r '.current.analysisId')

            if [[ -n "$ANALYSIS_ID" && "$ANALYSIS_ID" != "null" ]]; then
              echo ":white_check_mark: Found Analysis ID: $ANALYSIS_ID"
              break
            fi

            echo ":hourglass_flowing_sand: Analysis not ready yet. Retrying in 10 seconds..."
            sleep 10
          done

          if [[ -z "$ANALYSIS_ID" || "$ANALYSIS_ID" == "null" ]]; then
            echo ":x: ERROR: Failed to get analysis ID after multiple attempts."
            exit 1
          fi

          echo ":mag: Fetching quality gate status..."
          REPORT_RESPONSE=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/qualitygates/project_status?analysisId=$ANALYSIS_ID")
          STATUS=$(echo "$REPORT_RESPONSE" | jq -r '.projectStatus.status')

          if [[ -z "$STATUS" || "$STATUS" == "null" ]]; then
            echo ":x: ERROR: Failed to get quality gate status."
            exit 1
          fi

          echo ":white_check_mark: SonarQube Status: $STATUS"

          ERRORS=$(echo "$REPORT_RESPONSE" | jq -c '[.projectStatus.conditions[] | select(.status=="ERROR") | {metric: .metricKey, value: .actualValue, threshold: .errorThreshold}]')

          echo ":mag: Fetching issues for file: $TARGET_FILE..."
          FILE_ISSUES_RESPONSE=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/issues/search?componentKeys=$SONAR_PROJECT_KEY:$TARGET_FILE")

          # Ensure valid JSON format in sonar_report.json
          jq -n --arg status "$STATUS" --argjson errors "$ERRORS" --argjson issues "$FILE_ISSUES_RESPONSE" \
            '{status: $status, errors: $errors, issues: $issues}' > sonar_report.json

          echo ":white_check_mark: SonarQube report generated successfully for $TARGET_FILE."

      - name: Check for Existing Check Run
        id: check_existing
        run: |
          GITHUB_REPO="${{ github.repository }}"
          GITHUB_SHA="${{ github.sha }}"
          GITHUB_TOKEN="${{ github.event.inputs.github_token }}"

          echo "üîç Checking for existing SonarQube check runs..."
          EXISTING_CHECK_RUNS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$GITHUB_REPO/commits/$GITHUB_SHA/check-runs" | jq '.check_runs[] | select(.name=="SonarQube Analysis")')

          if [[ -n "$EXISTING_CHECK_RUNS" ]]; then
            echo "‚ö†Ô∏è SonarQube Check Run already exists. Skipping duplicate creation."
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "‚úÖ No existing SonarQube check runs found."
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: Create or Update GitHub Check Run
        run: |
          GITHUB_REPO="${{ github.repository }}"
          GITHUB_SHA="${{ github.sha }}"
          GITHUB_TOKEN="${{ github.event.inputs.github_token }}"
          CHECK_NAME="SonarQube Analysis"

          echo "üîç Checking for existing check run..."
          RESPONSE=$(curl -s -X GET "https://api.github.com/repos/$GITHUB_REPO/commits/$GITHUB_SHA/check-runs" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN")

          CHECK_ID=$(echo "$RESPONSE" | jq -r --arg NAME "$CHECK_NAME" '.check_runs[] | select(.name == $NAME) | .id')

          SONAR_REPORT=$(jq -c . sonar_report.json | jq -Rs .)

          if [[ -n "$CHECK_ID" && "$CHECK_ID" != "null" ]]; then
            echo "üîÑ Updating existing SonarQube Check Run (ID: $CHECK_ID)..."
            curl -s -X PATCH "https://api.github.com/repos/$GITHUB_REPO/check-runs/$CHECK_ID" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -d @- <<EOF
            {
              "name": "$CHECK_NAME",
              "head_sha": "$GITHUB_SHA",
              "status": "completed",
              "conclusion": "success",
              "output": {
                "title": "SonarQube Analysis Report",
                "summary": "Updated SonarQube analysis results.",
                "text": $SONAR_REPORT
              }
            }
            EOF
            echo "‚úÖ SonarQube Check Run updated."
          else
            echo "üöÄ Creating new SonarQube Check Run..."
            curl -s -X POST "https://api.github.com/repos/$GITHUB_REPO/check-runs" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -d @- <<EOF
            {
              "name": "$CHECK_NAME",
              "head_sha": "$GITHUB_SHA",
              "status": "completed",
              "conclusion": "success",
              "output": {
                "title": "SonarQube Analysis Report",
                "summary": "The SonarQube analysis has completed.",
                "text": $SONAR_REPORT
              }
            }
            EOF
            echo "‚úÖ SonarQube Check Run created."
          fi

      - name: Clean up workspace
        run: |
          echo "üóëÔ∏è Cleaning up workspace..."
          sudo rm -rf $GITHUB_WORKSPACE
          echo "‚úÖ Workspace cleaned!"
