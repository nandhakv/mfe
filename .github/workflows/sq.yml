name: SonarQube Analysis

on:
  workflow_dispatch:
    inputs:
      files:
        description: "Comma-separated list of files to analyze (e.g., src/index.js, app.js)"
        required: true
      branch:
        description: "Branch to run the analysis on"
        required: true
        default: "master"
      github_token:
        description: "GitHub Token from trigger request"
        required: true

jobs:
  sonar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Configure Git (Fix Missing Blame Info)
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"

      - name: Set Unique Project Key
        run: |
          TIMESTAMP=$(date +%s)
          UNIQUE_PROJECT_KEY="nandhakv_mfe_${TIMESTAMP}"
          echo "SONAR_PROJECT_KEY=$UNIQUE_PROJECT_KEY" >> $GITHUB_ENV
          echo "Using SonarQube Project Key: $UNIQUE_PROJECT_KEY"

      - name: Create SonarQube Project
        run: |
          echo "🚀 Creating new SonarQube project: $SONAR_PROJECT_KEY..."
          curl -s -X POST -u "squ_6727287fb92d5482177acbc7f816ef5bffddbd08:" \
            "http://sonarqube-alb-1277571580.us-east-1.elb.amazonaws.com/api/projects/create" \
            -d "name=$SONAR_PROJECT_KEY&project=$SONAR_PROJECT_KEY"
          echo "✅ SonarQube project created."

      - name: Run SonarQube Analysis
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: "squ_3edfa90db17cdd003e434da9a4e28de549a83595"
          SONAR_HOST_URL: "http://sonarqube-alb-1277571580.us-east-1.elb.amazonaws.com"
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.sources=.
            -Dsonar.inclusions=${{ github.event.inputs.files }}
            -Dsonar.scm.provider=git

      - name: Get SonarQube Report for Specific File
        run: |
          SONAR_PROJECT_KEY="${{ env.SONAR_PROJECT_KEY }}"
          SONAR_TOKEN="squ_3edfa90db17cdd003e434da9a4e28de549a83595"
          SONAR_HOST="http://sonarqube-alb-1277571580.us-east-1.elb.amazonaws.com"
          TARGET_FILE="${{ github.event.inputs.files }}"  # File passed in the workflow

          echo ":mag: Verifying SonarQube authentication..."
          AUTH_RESPONSE=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/authentication/validate")
          AUTH_STATUS=$(echo "$AUTH_RESPONSE" | jq -r '.valid')

          if [[ "$AUTH_STATUS" != "true" ]]; then
            echo ":x: ERROR: Invalid SonarQube token or authentication failed."
            exit 1
          fi
          echo ":white_check_mark: Authentication successful."

          echo ":mag: Fetching analysis ID for project: $SONAR_PROJECT_KEY..."

          for i in {1..10}; do
            ANALYSIS_RESPONSE=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/ce/component?component=$SONAR_PROJECT_KEY")
            ANALYSIS_ID=$(echo "$ANALYSIS_RESPONSE" | jq -r '.current.analysisId')

            if [[ -n "$ANALYSIS_ID" && "$ANALYSIS_ID" != "null" ]]; then
              echo ":white_check_mark: Found Analysis ID: $ANALYSIS_ID"
              break
            fi

            echo ":hourglass_flowing_sand: Analysis not ready yet. Retrying in 10 seconds..."
            sleep 10
          done

          if [[ -z "$ANALYSIS_ID" || "$ANALYSIS_ID" == "null" ]]; then
            echo ":x: ERROR: Failed to get analysis ID after multiple attempts."
            exit 1
          fi

          echo ":mag: Fetching quality gate status..."
          REPORT_RESPONSE=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/qualitygates/project_status?analysisId=$ANALYSIS_ID")
          STATUS=$(echo "$REPORT_RESPONSE" | jq -r '.projectStatus.status')

          if [[ -z "$STATUS" || "$STATUS" == "null" ]]; then
            echo ":x: ERROR: Failed to get quality gate status."
            exit 1
          fi

          echo ":white_check_mark: SonarQube Status: $STATUS"

          ERRORS=$(echo "$REPORT_RESPONSE" | jq -c '[.projectStatus.conditions[] | select(.status=="ERROR") | {metric: .metricKey, value: .actualValue, threshold: .errorThreshold}]')

          echo ":mag: Fetching issues for file: $TARGET_FILE..."
          FILE_ISSUES_RESPONSE=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/issues/search?componentKeys=$SONAR_PROJECT_KEY:$TARGET_FILE")

          # Ensure valid JSON format in sonar_report.json
          jq -n --arg status "$STATUS" --argjson errors "$ERRORS" --argjson issues "$FILE_ISSUES_RESPONSE" \
            '{status: $status, errors: $errors, issues: $issues}' > sonar_report.json

          echo ":white_check_mark: SonarQube report generated successfully for $TARGET_FILE."

      - name: Create GitHub Check Run
        run: |
          GITHUB_REPO="${{ github.repository }}"
          GITHUB_SHA="${{ github.sha }}"
          GITHUB_TOKEN="${{ github.event.inputs.github_token }}"

          echo "Creating a GitHub Check Run to notify the GitHub App..."

          SONAR_REPORT=$(jq -c . sonar_report.json | jq -Rs .)

          RESPONSE=$(curl -s -X POST "https://api.github.com/repos/$GITHUB_REPO/check-runs" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -d @- <<EOF
          {
            "name": "SonarQube Analysis",
            "head_sha": "$GITHUB_SHA",
            "status": "completed",
            "conclusion": "success",
            "output": {
              "title": "SonarQube Analysis Report",
              "summary": "The SonarQube analysis has completed. Click below to view details.",
              "text": $SONAR_REPORT
            }
          }
          EOF
          )

          echo "GitHub Check Run Response: $RESPONSE"

      - name: Delete SonarQube Project
        run: |
          SONAR_PROJECT_KEY="${{ env.SONAR_PROJECT_KEY }}"
          SONAR_TOKEN="squ_3edfa90db17cdd003e434da9a4e28de549a83595"
          SONAR_HOST="http://sonarqube-alb-1277571580.us-east-1.elb.amazonaws.com"

          echo ":wastebasket: Deleting SonarQube project: $SONAR_PROJECT_KEY..."

          # Verify the project exists before trying to delete
          PROJECT_RESPONSE=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST/api/projects/search?projects=$SONAR_PROJECT_KEY")
          PROJECT_EXISTS=$(echo "$PROJECT_RESPONSE" | jq -r '.components | length')

          if [[ "$PROJECT_EXISTS" -eq 0 ]]; then
            echo ":warning: WARNING: SonarQube project '$SONAR_PROJECT_KEY' does not exist. Skipping deletion."
            exit 0
          fi

          # Check if the project has active background tasks
          TASKS_RESPONSE=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST/api/ce/activity?component=$SONAR_PROJECT_KEY")
          PENDING_TASKS=$(echo "$TASKS_RESPONSE" | jq -r '[.tasks[] | select(.status=="PENDING" or .status=="IN_PROGRESS")] | length')

          if [[ "$PENDING_TASKS" -gt 0 ]]; then
            echo ":hourglass_flowing_sand: SonarQube project has active background tasks. Waiting for completion..."
            for i in {1..10}; do
              TASKS_RESPONSE=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST/api/ce/activity?component=$SONAR_PROJECT_KEY")
              PENDING_TASKS=$(echo "$TASKS_RESPONSE" | jq -r '[.tasks[] | select(.status=="PENDING" or .status=="IN_PROGRESS")] | length')

              if [[ "$PENDING_TASKS" -eq 0 ]]; then
                echo ":white_check_mark: All background tasks completed. Proceeding with deletion."
                break
              fi

              echo ":hourglass_flowing_sand: Tasks still running. Retrying in 10 seconds..."
              sleep 10
            done
          fi

          # Delete the project
          DELETE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST -u "$SONAR_TOKEN:" "$SONAR_HOST/api/projects/delete?project=$SONAR_PROJECT_KEY")

          if [[ "$DELETE_RESPONSE" -eq 204 ]]; then
            echo ":white_check_mark: SonarQube project deleted successfully!"
          else
            echo ":x: ERROR: Failed to delete SonarQube project. HTTP Response: $DELETE_RESPONSE"
            exit 1
          fi

      - name: Clean up workspace
        run: |
          echo "🗑️ Cleaning up workspace..."
          sudo rm -rf $GITHUB_WORKSPACE
          echo "✅ Workspace cleaned!"
